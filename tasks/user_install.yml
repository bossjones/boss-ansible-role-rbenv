---
- name: checkout boss__rbenv_repo for selected users
  git: >
    repo={{ boss__rbenv_repo }}
    dest={{ boss__rbenv_root }}
    version={{ rbenv.version }}
    accept_hostkey=yes
    force=yes
  with_items: "{{ boss__rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  ignore_errors: yes

- name: create plugins directory for selected users
  file: state=directory path={{ boss__rbenv_root }}/plugins
  with_items: "{{ boss__rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  ignore_errors: yes

- name: install plugins for selected users
  git: >
    repo={{ item[1].repo }}
    dest={{ boss__rbenv_root }}/plugins/{{ item[1].name }}
    version={{ item[1].version }}
    accept_hostkey=yes
    force=yes
  with_nested:
    - "{{ boss__rbenv_users }}"
    - "{{ rbenv_plugins }}"
  become: yes
  become_user: "{{ item[0] }}"
  ignore_errors: yes

- name: add rbenv initialization to profile system-wide
  template: src=rbenv_user.sh.j2 dest=/etc/profile.d/rbenv.sh owner=root group=root mode=0755
  become: yes
  when:
    - (ansible_os_family != 'OpenBSD' and ansible_os_family != 'Darwin') and boss__rbenv_user_profile

- name: add rbenv initialization to profile system-wide
  blockinfile: block="{{ lookup('template', 'rbenv_user.sh.j2') }}" dest=/etc/profile
  become: yes
  when:
    - ansible_os_family == 'Darwin' and boss__rbenv_user_profile

- name: set default-gems for select users
  copy: src=default-gems dest={{ boss__rbenv_root }}/default-gems
  with_items: "{{ boss__rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  when:
    - boss__default_gems_file is not defined
  ignore_errors: yes

- name: set custom default-gems for select users
  copy: src={{ boss__default_gems_file }} dest={{ boss__rbenv_root }}/default-gems
  with_items: "{{ boss__rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  when:
    - boss__default_gems_file is defined
  ignore_errors: yes

- name: set gemrc for select users
  copy: src=gemrc dest=~/.gemrc
  with_items: "{{ boss__rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  ignore_errors: yes

- name: set vars for select users
  copy: src=vars dest={{ boss__rbenv_root }}/vars
  with_items: "{{ boss__rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  ignore_errors: yes

- name: check ruby versions installed for select users
  shell: $SHELL -lc "{{ boss__rbenv_root }}/bin/rbenv versions --bare"
  with_items: "{{ boss__rbenv_users }}"
  become: yes
  become_user: "{{ item }}"
  register: rbenv_versions
  changed_when: false
  ignore_errors: yes
  failed_when: false
  check_mode: no

- name: install ruby {{ item[1].version }} for select users
  shell: $SHELL -lc "{{ boss__rbenv_root }}/bin/rbenv install --skip-existing {{ item[1].version }}"
  become: yes
  become_user: "{{ item[0] }}"
  with_nested:
    - "{{ boss__rbenv_users }}"
    - "{{ boss__rbenv.rubies }}"
  ignore_errors: yes
  environment: "{{ item[1].env | default({}) | combine({ 'TMPDIR': boss__rbenv_tmpdir }) }}"

- name: check which old rubies to remove for select users
  set_fact:
    drop_ruby:
      - "{{ item[1] }}"
      - "{{ '{'+item[0].stdout_lines|list|difference(item[2])|join(',')+'}'}}"
  become: yes
  become_user: "{{ item[1] }}"
  with_nested:
    - "{{ boss__ruby_installed.results }}"
    - "{{ boss__rbenv_users }}"
    - "{{ boss__rbenv.rubies|map(attribute='version')|list }}"
  when:
    - rbenv_clean_up
    - item[0].item[0] == item[1]
    - item[0].stdout_lines|list != item[2]
  register: boss__removable_rubies
  ignore_errors: yes

- name: remove old rubies
  shell: $SHELL -lc "rm -rf {{ boss__rbenv_root }}/versions/{{ item.ansible_facts.drop_ruby[1] }}"
  changed_when: false
  become: yes
  become_user: "{{ item.ansible_facts.drop_ruby[0] }}"
  with_items: "{{ boss__removable_rubies.results }}"
  when: rbenv_clean_up
  ignore_errors: yes

- name: check if user ruby version is {{ boss__rbenv.default_ruby }}
  shell: $SHELL -lc "{{ boss__rbenv_root }}/bin/rbenv version | cut -d ' ' -f 1 | grep -Fx '{{ boss__rbenv.default_ruby }}'"
  become: yes
  become_user: "{{ item }}"
  with_items: "{{ boss__rbenv_users }}"
  register: ruby_selected
  changed_when: false
  ignore_errors: yes
  failed_when: false
  check_mode: no

- name: set ruby {{ boss__rbenv.default_ruby }} for select users
  shell: $SHELL -lc "{{ boss__rbenv_root }}/bin/rbenv global {{ boss__rbenv.default_ruby }} && rbenv rehash"
  become: yes
  become_user: "{{ item[1] }}"
  with_together:
    - "{{ ruby_selected.results }}"
    - "{{ boss__rbenv_users }}"
  when:
    - item[0].rc != 0
  ignore_errors: yes
